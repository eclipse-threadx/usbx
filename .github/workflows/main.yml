# The name of the workflow. GitHub displays the names of your 
# workflows under your repository's "Action" tab.
name: regression_test 

# Controls when the action will run.
on:
  # Enable the workflow to be triggered manually.
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the master branch.
  pull_request: 
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "run_tests".
  run_tests:

    # Enviroments are used to describe a general deployment target like "production", "staging", or "development".
    # When a GitHub Actions workflow deploys to an environment, the environment is displayed on the main page of the repository.
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Use "permissions" to modify the default permissions granted to the "GITHUB_TOKEN".
    permissions:
      # Required by "deploy-pages" action.
      pages: write
      id-token: write

      # Required by "nricoMi/publish-unit-test-result-action" action.
      contents: read
      issues: read
      checks: write
      pull-requests: write
      
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Check out the repository.
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        submodules: true
    
      # Install software.
    - name: Install softwares
      run: ./scripts/install.sh

      # Build tests.
    - name: Build USBX
      run: ./scripts/build.sh

      # Run tests.
    - name: Test USBX
      run: ./scripts/test.sh
      
      # Use "EnricoMi/publish-unit-test-result-action" action to publish test results.
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2.11.0
      # By default, if the previous step fails, this step will not be executed.
      # Add if condition to run this step even if the previous step fails
      if: success() || failure()
      with:
        files: ./test/cmake/usbx/build/*/*.xml
          
      # Upload test results to artifacts
    - name: Upload Test Results
      if: success() || failure()
      uses: actions/upload-artifact@v3.1.3
      with:
        name: test_reports_USBX
        path: |
          ./test/cmake/usbx/build/*.txt
          ./test/cmake/usbx/build/*/Testing/**/*.xml

    - name: Configure GitHub Pages # Enable GitHub Pages and extract various metadata about a site.
      uses: actions/configure-pages@v3.0.6
        
      # Package and upload GitHub Pages artifact.
    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v2.0.0
      with:
        name: default_build_coverage_USBX
        path: ./test/cmake/usbx/coverage_report/default_build_coverage
        
      # Deploing GitHub Pages artifacts.
    - name: Deploy GitHub Pages site
      id: deployment
      uses: actions/deploy-pages@v1.2.9
      with:
        artifact_name: default_build_coverage_USBX

      # Gegenerate code coverage results summary to code-coverage-results.md
    - name: Generate Code Coverage Results Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ./test/cmake/usbx/coverage_report/default_build_coverage.xml
        format: markdown
        badge: true
        hide_complexity: true
        output: file

      # Create a new markdown file "code-coverage-summary.md".
      # Put the coverage summary and report url to the new markdown file.
      # Write the coverage summary to job summary.
    - name: Write Code Coverage Report URL
      run: |
        cat code-coverage-results.md > code-coverage-summary.md
        echo -e "\n" >> code-coverage-summary.md
        echo '[Open Coverage Report](${{ steps.deployment.outputs.page_url }})' >> code-coverage-summary.md
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-summary.md >> $GITHUB_STEP_SUMMARY
 
    - name: Create CheckRun for Code Coverage # Create check run to publish the code coverage summary to the check summary
      uses: LouisBrunner/checks-action@v1.6.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Code Coverage
        conclusion: ${{ job.status }}
        output: |
          {"summary":"Coverage Report"}
        output_text_description_file: code-coverage-summary.md

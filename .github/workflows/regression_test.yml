name: USBX Regression Test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      tests_to_run:
        description: 'all, single or multiple of default_build_coverage error_check_build_full_coverage tracex_enable_build device_buffer_owner_build device_zero_copy_build nofx_build_coverage optimized_build standalone_device_build_coverage standalone_device_buffer_owner_build standalone_device_zero_copy_build standalone_host_build_coverage standalone_build_coverage generic_build otg_support_build memory_management_build_coverage msrc_rtos_build msrc_standalone_build'
        required: false
        default: 'default_build_coverage'
      skip_coverage:
        required: false
        type: boolean
        default: false
      coverage_name:
        required: false
        default: 'default_build_coverage'
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  setup_usbx_env:
    runs-on: ubuntu-latest
    steps:
    - name: USBX Inputs to ENV
      run: |
        echo tests_to_run: ${{ inputs.tests_to_run }}
        echo skip_coverage: ${{ inputs.skip_coverage }}
        echo coverage_name: ${{ inputs.coverage_name }}
        echo "TESTS_TO_RUN=${{ inputs.tests_to_run }}" >> $GITHUB_ENV
        echo "SKIP_COVERAGE=${{ inputs.skip_coverage }}" >> $GITHUB_ENV
        echo "COVERAGE_NAME=${{ inputs.coverage_name }}" >> $GITHUB_ENV
      env:
        TESTS_TO_RUN: default_build_coverage
        COVERAGE_NAME: default_build_coverage
        SKIP_COVERAGE: default_build_coverage

  run_tests:
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
      pages: write
      id-token: write

    uses: xiaocq2001/threadx/.github/workflows/regression_template.yml@chxiao/test_workflow
    with:
      cmake_path: ./test/cmake/usbx
      build_script: ./scripts/build.sh ${{ env.TESTS_TO_RUN }}
      test_script: ./scripts/test.sh ${{ env.TESTS_TO_RUN }}
      coverage_name: ${{ env.COVERAGE_NSME }}
      skip_coverage: ${{ !!env.SKIP_COVERAGE }}
